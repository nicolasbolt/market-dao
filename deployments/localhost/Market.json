{
  "address": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Market__NeedsMoreThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Market__TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "FeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "REWARD_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3911c218ccae6485cb7136af0504dcd031ecbfc56447be5f2dc58e2616f764fc",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
    "transactionIndex": 0,
    "gasUsed": "649003",
    "logsBloom": "0x
    "blockHash": "0xaa2e5ee72c44368b4665c5a20fbd3dc255aab6347f93fde2a58dca48d74739da",
    "transactionHash": "0x3911c218ccae6485cb7136af0504dcd031ecbfc56447be5f2dc58e2616f764fc",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8,
        "transactionHash": "0x3911c218ccae6485cb7136af0504dcd031ecbfc56447be5f2dc58e2616f764fc",
        "address": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xaa2e5ee72c44368b4665c5a20fbd3dc255aab6347f93fde2a58dca48d74739da"
      }
    ],
    "blockNumber": 8,
    "cumulativeGasUsed": "649003",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "f8f5ea7a749e52435435397faddb843f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Market__NeedsMoreThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Market__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REWARD_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Market.sol\":\"Market\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror Market__TransferFailed();\\nerror Market__NeedsMoreThanZero();\\n\\ncontract Market is Ownable {\\n    IERC20 public s_stakingToken;\\n    IERC20 public s_rewardToken;\\n\\n    uint256 public REWARD_RATE;\\n    uint256 public s_totalSupply;\\n    uint256 public s_rewardPerTokenStored;\\n    uint256 public s_lastUpdateTime;\\n\\n    uint256 private fee;\\n\\n    event FeeChanged(uint256 newFee);\\n\\n    mapping(address => uint256) public s_balances;\\n    mapping(address => uint256) public s_rewards;\\n    mapping(address => uint256) public s_userRewardPerTokenPaid;\\n\\n    modifier updateReward(address account) {\\n        // how much reward per token\\n        s_rewardPerTokenStored = rewardPerToken();\\n        // last timestamp\\n        s_lastUpdateTime = block.timestamp;\\n        s_rewards[account] = earned(account);\\n        s_userRewardPerTokenPaid[account] = s_rewardPerTokenStored;\\n        _;\\n    }\\n\\n    modifier moreThanZero(uint256 amount) {\\n        if (amount == 0) {\\n            revert Market__NeedsMoreThanZero();\\n        }\\n        _;\\n    }\\n\\n    constructor(address stakingToken, address rewardToken) {\\n        s_stakingToken = IERC20(stakingToken);\\n        s_rewardToken = IERC20(rewardToken);\\n    }\\n\\n    function setFee(uint256 newFee) public onlyOwner {\\n        fee = newFee;\\n        emit FeeChanged(newFee);\\n    }\\n\\n    function retrieveFee() public view returns (uint256) {\\n        return fee;\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        uint256 currentBalance = s_balances[account];\\n        uint256 amountPaid = s_userRewardPerTokenPaid[account];\\n        uint256 currentRewardPerToken = rewardPerToken();\\n        uint256 pastRewards = s_rewards[account];\\n\\n        uint256 earn = ((currentBalance *\\n            (currentRewardPerToken - amountPaid)) / 1e18) + pastRewards;\\n        return earn;\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (s_totalSupply == 0) {\\n            return s_rewardPerTokenStored;\\n        }\\n\\n        return\\n            s_rewardPerTokenStored +\\n            (((block.timestamp - s_lastUpdateTime) * REWARD_RATE * 1e18) /\\n                s_totalSupply);\\n    }\\n\\n    // todo add multiple tokens\\n    // chainlink price feeds to convert prices between tokens\\n    function stake(uint256 amount)\\n        external\\n        updateReward(msg.sender)\\n        moreThanZero(amount)\\n    {\\n        // keep track of how much this user has staked\\n        // keep track of how much token we have total\\n        // transfer the tokens to this contract\\n        s_balances[msg.sender] = s_balances[msg.sender] + amount;\\n        s_totalSupply = s_totalSupply + amount;\\n        // emit event\\n        bool success = s_stakingToken.transferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n\\n        // require(success, \\\"Failed\\\");\\n        if (!success) {\\n            revert Market__TransferFailed();\\n        }\\n    }\\n\\n    function withdraw(uint256 amount)\\n        external\\n        updateReward(msg.sender)\\n        moreThanZero(amount)\\n    {\\n        s_balances[msg.sender] = s_balances[msg.sender] - amount;\\n        s_totalSupply = s_totalSupply - amount;\\n        bool success = s_stakingToken.transfer(msg.sender, amount);\\n\\n        if (!success) {\\n            revert Market__TransferFailed();\\n        }\\n    }\\n\\n    function claimReward() external updateReward(msg.sender) {\\n        uint256 rewards = s_rewards[msg.sender];\\n        bool success = s_rewardToken.transfer(msg.sender, rewards);\\n\\n        if (!success) {\\n            revert Market__TransferFailed();\\n        }\\n\\n        // How much reward do they get?\\n        // The contract is going to emit x tokens per second\\n        // And disperse them to all token stakers\\n        // 100 tokens per second\\n        // staked: 50 staked tokens, 20 staked tokens, 30 staked tokens (total = 100)\\n        // rewards: 50 reward tokens, 20 reward tokens, 30 reward tokens\\n        // staked: 100, 50, 20, 30 (total = 200)\\n        // rewards: 50, 25, 10, 15\\n    }\\n}\\n\\n// stake: Lock tokens into our smart contract\\n// withdraw: unlock tokens and pull out of the contract\\n// claimReward: users get their reward tokens\\n// What's a good reward mechanism?\\n\",\"keccak256\":\"0x5dbe923ebf4b4fe9baf78223db57a8a6da3cadab404b0a64fc63e0742edeae9f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610a8c380380610a8c83398101604081905261002f916100d5565b61003833610069565b600180546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055610108565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100d057600080fd5b919050565b600080604083850312156100e857600080fd5b6100f1836100b9565b91506100ff602084016100b9565b90509250929050565b610975806101176000396000f3fe608060405234801561001057600080fd5b50600436106101105760003560e01c80638c4b47a1116100ad578063b88a802f11610071578063b88a802f14610219578063bea0815114610221578063cd3daf9d14610241578063f245ace414610249578063f2fde38b1461026957600080fd5b80638c4b47a1146101ba5780638da5cb5b146101c2578063a694fc3a146101d3578063ab32eb69146101e6578063adca9b721461020657600080fd5b80628cc262146101155780632e1a7d4d1461013b578063304ac91b146101505780635997bb37146101595780636374cc001461016257806369fe0e2d1461018d5780636a74a0fc146101a05780636aa0838f146101a9578063715018a6146101b2575b600080fd5b610128610123366004610819565b61027c565b6040519081526020015b60405180910390f35b61014e61014936600461086b565b610302565b005b61012860055481565b61012860035481565b600254610175906001600160a01b031681565b6040516001600160a01b039091168152602001610132565b61014e61019b36600461086b565b610453565b61012860045481565b61012860065481565b61014e6104c1565b600754610128565b6000546001600160a01b0316610175565b61014e6101e136600461086b565b6104f7565b6101286101f4366004610819565b60086020526000908152604090205481565b600154610175906001600160a01b031681565b61014e6105da565b61012861022f366004610819565b60096020526000908152604090205481565b6101286106cf565b610128610257366004610819565b600a6020526000908152604090205481565b61014e610277366004610819565b61072e565b6001600160a01b038116600090815260086020908152604080832054600a909252822054826102a96106cf565b6001600160a01b03861660009081526009602052604081205491925081670de0b6b3a76400006102d98686610912565b6102e390886108f3565b6102ed91906108d1565b6102f791906108b9565b979650505050505050565b3361030b6106cf565b6005554260065561031b8161027c565b6001600160a01b038216600090815260096020908152604080832093909355600554600a90915291902055818061036557604051630daf3e7160e41b815260040160405180910390fd5b33600090815260086020526040902054610380908490610912565b3360009081526008602052604090205560045461039e908490610912565b600490815560015460405163a9059cbb60e01b81523392810192909252602482018590526000916001600160a01b039091169063a9059cbb906044015b602060405180830381600087803b1580156103f557600080fd5b505af1158015610409573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042d9190610849565b90508061044d57604051633a267cdb60e01b815260040160405180910390fd5b50505050565b6000546001600160a01b031633146104865760405162461bcd60e51b815260040161047d90610884565b60405180910390fd5b60078190556040518181527f6bbc57480a46553fa4d156ce702beef5f3ad66303b0ed1a5d4cb44966c6584c39060200160405180910390a150565b6000546001600160a01b031633146104eb5760405162461bcd60e51b815260040161047d90610884565b6104f560006107c9565b565b336105006106cf565b600555426006556105108161027c565b6001600160a01b038216600090815260096020908152604080832093909355600554600a90915291902055818061055a57604051630daf3e7160e41b815260040160405180910390fd5b336000908152600860205260409020546105759084906108b9565b336000908152600860205260409020556004546105939084906108b9565b60049081556001546040516323b872dd60e01b81523392810192909252306024830152604482018590526000916001600160a01b03909116906323b872dd906064016103db565b336105e36106cf565b600555426006556105f38161027c565b6001600160a01b03828116600090815260096020818152604080842095909555600554600a8252858420553380845291905283822054600254945163a9059cbb60e01b8152600481019290925260248201819052939192919091169063a9059cbb90604401602060405180830381600087803b15801561067257600080fd5b505af1158015610686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106aa9190610849565b9050806106ca57604051633a267cdb60e01b815260040160405180910390fd5b505050565b6000600454600014156106e3575060055490565b6004546003546006546106f69042610912565b61070091906108f3565b61071290670de0b6b3a76400006108f3565b61071c91906108d1565b60055461072991906108b9565b905090565b6000546001600160a01b031633146107585760405162461bcd60e51b815260040161047d90610884565b6001600160a01b0381166107bd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161047d565b6107c6816107c9565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561082b57600080fd5b81356001600160a01b038116811461084257600080fd5b9392505050565b60006020828403121561085b57600080fd5b8151801515811461084257600080fd5b60006020828403121561087d57600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156108cc576108cc610929565b500190565b6000826108ee57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561090d5761090d610929565b500290565b60008282101561092457610924610929565b500390565b634e487b7160e01b600052601160045260246000fdfea264697066735822122052ed660d5bf1841333e5c7e9ea62bbe5b30d9f1266cd15d39d29571ddfe42f0764736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101105760003560e01c80638c4b47a1116100ad578063b88a802f11610071578063b88a802f14610219578063bea0815114610221578063cd3daf9d14610241578063f245ace414610249578063f2fde38b1461026957600080fd5b80638c4b47a1146101ba5780638da5cb5b146101c2578063a694fc3a146101d3578063ab32eb69146101e6578063adca9b721461020657600080fd5b80628cc262146101155780632e1a7d4d1461013b578063304ac91b146101505780635997bb37146101595780636374cc001461016257806369fe0e2d1461018d5780636a74a0fc146101a05780636aa0838f146101a9578063715018a6146101b2575b600080fd5b610128610123366004610819565b61027c565b6040519081526020015b60405180910390f35b61014e61014936600461086b565b610302565b005b61012860055481565b61012860035481565b600254610175906001600160a01b031681565b6040516001600160a01b039091168152602001610132565b61014e61019b36600461086b565b610453565b61012860045481565b61012860065481565b61014e6104c1565b600754610128565b6000546001600160a01b0316610175565b61014e6101e136600461086b565b6104f7565b6101286101f4366004610819565b60086020526000908152604090205481565b600154610175906001600160a01b031681565b61014e6105da565b61012861022f366004610819565b60096020526000908152604090205481565b6101286106cf565b610128610257366004610819565b600a6020526000908152604090205481565b61014e610277366004610819565b61072e565b6001600160a01b038116600090815260086020908152604080832054600a909252822054826102a96106cf565b6001600160a01b03861660009081526009602052604081205491925081670de0b6b3a76400006102d98686610912565b6102e390886108f3565b6102ed91906108d1565b6102f791906108b9565b979650505050505050565b3361030b6106cf565b6005554260065561031b8161027c565b6001600160a01b038216600090815260096020908152604080832093909355600554600a90915291902055818061036557604051630daf3e7160e41b815260040160405180910390fd5b33600090815260086020526040902054610380908490610912565b3360009081526008602052604090205560045461039e908490610912565b600490815560015460405163a9059cbb60e01b81523392810192909252602482018590526000916001600160a01b039091169063a9059cbb906044015b602060405180830381600087803b1580156103f557600080fd5b505af1158015610409573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042d9190610849565b90508061044d57604051633a267cdb60e01b815260040160405180910390fd5b50505050565b6000546001600160a01b031633146104865760405162461bcd60e51b815260040161047d90610884565b60405180910390fd5b60078190556040518181527f6bbc57480a46553fa4d156ce702beef5f3ad66303b0ed1a5d4cb44966c6584c39060200160405180910390a150565b6000546001600160a01b031633146104eb5760405162461bcd60e51b815260040161047d90610884565b6104f560006107c9565b565b336105006106cf565b600555426006556105108161027c565b6001600160a01b038216600090815260096020908152604080832093909355600554600a90915291902055818061055a57604051630daf3e7160e41b815260040160405180910390fd5b336000908152600860205260409020546105759084906108b9565b336000908152600860205260409020556004546105939084906108b9565b60049081556001546040516323b872dd60e01b81523392810192909252306024830152604482018590526000916001600160a01b03909116906323b872dd906064016103db565b336105e36106cf565b600555426006556105f38161027c565b6001600160a01b03828116600090815260096020818152604080842095909555600554600a8252858420553380845291905283822054600254945163a9059cbb60e01b8152600481019290925260248201819052939192919091169063a9059cbb90604401602060405180830381600087803b15801561067257600080fd5b505af1158015610686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106aa9190610849565b9050806106ca57604051633a267cdb60e01b815260040160405180910390fd5b505050565b6000600454600014156106e3575060055490565b6004546003546006546106f69042610912565b61070091906108f3565b61071290670de0b6b3a76400006108f3565b61071c91906108d1565b60055461072991906108b9565b905090565b6000546001600160a01b031633146107585760405162461bcd60e51b815260040161047d90610884565b6001600160a01b0381166107bd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161047d565b6107c6816107c9565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561082b57600080fd5b81356001600160a01b038116811461084257600080fd5b9392505050565b60006020828403121561085b57600080fd5b8151801515811461084257600080fd5b60006020828403121561087d57600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156108cc576108cc610929565b500190565b6000826108ee57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561090d5761090d610929565b500290565b60008282101561092457610924610929565b500390565b634e487b7160e01b600052601160045260246000fdfea264697066735822122052ed660d5bf1841333e5c7e9ea62bbe5b30d9f1266cd15d39d29571ddfe42f0764736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/Market.sol:Market",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7945,
        "contract": "contracts/Market.sol:Market",
        "label": "s_stakingToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)4737"
      },
      {
        "astId": 7948,
        "contract": "contracts/Market.sol:Market",
        "label": "s_rewardToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)4737"
      },
      {
        "astId": 7950,
        "contract": "contracts/Market.sol:Market",
        "label": "REWARD_RATE",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7952,
        "contract": "contracts/Market.sol:Market",
        "label": "s_totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7954,
        "contract": "contracts/Market.sol:Market",
        "label": "s_rewardPerTokenStored",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7956,
        "contract": "contracts/Market.sol:Market",
        "label": "s_lastUpdateTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7958,
        "contract": "contracts/Market.sol:Market",
        "label": "fee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7966,
        "contract": "contracts/Market.sol:Market",
        "label": "s_balances",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7970,
        "contract": "contracts/Market.sol:Market",
        "label": "s_rewards",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7974,
        "contract": "contracts/Market.sol:Market",
        "label": "s_userRewardPerTokenPaid",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)4737": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}