/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Staking, StakingInterface } from "../../contracts/Staking";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "stakingToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Staking__TransferFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "s_balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_stakingToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161031238038061031283398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61027f806100936000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80636a74a0fc14610051578063a694fc3a1461006d578063ab32eb6914610082578063adca9b72146100a2575b600080fd5b61005a60015481565b6040519081526020015b60405180910390f35b61008061007b36600461020a565b6100cd565b005b61005a6100903660046101b8565b60026020526000908152604090205481565b6000546100b5906001600160a01b031681565b6040516001600160a01b039091168152602001610064565b336000908152600260205260409020546100e8908290610223565b33600090815260026020526040902055600154610106908290610223565b600155600080546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561015c57600080fd5b505af1158015610170573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019491906101e8565b9050806101b45760405163eb4c684760e01b815260040160405180910390fd5b5050565b6000602082840312156101ca57600080fd5b81356001600160a01b03811681146101e157600080fd5b9392505050565b6000602082840312156101fa57600080fd5b815180151581146101e157600080fd5b60006020828403121561021c57600080fd5b5035919050565b6000821982111561024457634e487b7160e01b600052601160045260246000fd5b50019056fea264697066735822122015b3d549c60eb21d4a84eb3a575662a754fb7527cb3dddd610a3a9294886079564736f6c63430008070033";

type StakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Staking__factory extends ContractFactory {
  constructor(...args: StakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    stakingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Staking> {
    return super.deploy(stakingToken, overrides || {}) as Promise<Staking>;
  }
  override getDeployTransaction(
    stakingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(stakingToken, overrides || {});
  }
  override attach(address: string): Staking {
    return super.attach(address) as Staking;
  }
  override connect(signer: Signer): Staking__factory {
    return super.connect(signer) as Staking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new utils.Interface(_abi) as StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Staking {
    return new Contract(address, _abi, signerOrProvider) as Staking;
  }
}
