/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface MarketInterface extends utils.Interface {
  functions: {
    "REWARD_RATE()": FunctionFragment;
    "claimReward()": FunctionFragment;
    "earned(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "retrieveFee()": FunctionFragment;
    "rewardPerToken()": FunctionFragment;
    "s_balances(address)": FunctionFragment;
    "s_lastUpdateTime()": FunctionFragment;
    "s_rewardPerTokenStored()": FunctionFragment;
    "s_rewardToken()": FunctionFragment;
    "s_rewards(address)": FunctionFragment;
    "s_stakingToken()": FunctionFragment;
    "s_totalSupply()": FunctionFragment;
    "s_userRewardPerTokenPaid(address)": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "REWARD_RATE"
      | "claimReward"
      | "earned"
      | "owner"
      | "renounceOwnership"
      | "retrieveFee"
      | "rewardPerToken"
      | "s_balances"
      | "s_lastUpdateTime"
      | "s_rewardPerTokenStored"
      | "s_rewardToken"
      | "s_rewards"
      | "s_stakingToken"
      | "s_totalSupply"
      | "s_userRewardPerTokenPaid"
      | "setFee"
      | "stake"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "REWARD_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "earned", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "s_balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "s_lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_rewardPerTokenStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "s_rewards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "s_stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_userRewardPerTokenPaid",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "REWARD_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "s_balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "s_lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_rewardPerTokenStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "s_rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "s_stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_userRewardPerTokenPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "FeeChanged(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface FeeChangedEventObject {
  newFee: BigNumber;
}
export type FeeChangedEvent = TypedEvent<[BigNumber], FeeChangedEventObject>;

export type FeeChangedEventFilter = TypedEventFilter<FeeChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Market extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    REWARD_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    earned(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retrieveFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPerToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    s_lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_rewardPerTokenStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_rewardToken(overrides?: CallOverrides): Promise<[string]>;

    s_rewards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    s_stakingToken(overrides?: CallOverrides): Promise<[string]>;

    s_totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_userRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  REWARD_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  claimReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retrieveFee(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

  s_balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  s_lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  s_rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

  s_rewardToken(overrides?: CallOverrides): Promise<string>;

  s_rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  s_stakingToken(overrides?: CallOverrides): Promise<string>;

  s_totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  s_userRewardPerTokenPaid(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    REWARD_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(overrides?: CallOverrides): Promise<void>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    retrieveFee(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    s_balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    s_lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    s_rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    s_rewardToken(overrides?: CallOverrides): Promise<string>;

    s_rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    s_stakingToken(overrides?: CallOverrides): Promise<string>;

    s_totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    s_userRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFee(newFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "FeeChanged(uint256)"(newFee?: null): FeeChangedEventFilter;
    FeeChanged(newFee?: null): FeeChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    REWARD_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retrieveFee(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    s_balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    s_lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    s_rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    s_rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    s_rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    s_stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    s_totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    s_userRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    REWARD_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrieveFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_rewardPerTokenStored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_rewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_userRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
